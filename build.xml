<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright Â© 2013 jomp16 <joseoliviopedrosa@gmail.com>
  ~ This work is free. You can redistribute it and/or modify it under the
  ~ terms of the Do What The Fuck You Want To Public License, Version 2,
  ~ as published by Sam Hocevar. See the COPYING file for more details.
  -->

<project name="jomp16-bot1" default="all">


    <property file="build.properties"/>
    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.lib/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/.bundle/**"/>
        <exclude name="**/*.rbc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.apk"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.ane"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
    </patternset>


    <!-- Project Libraries -->

    <path id="library.commons-codec-1.8.classpath">
        <pathelement location="${basedir}/lib/commons-codec-1.8.jar"/>
    </path>

    <path id="library.commons-lang3-3.1.classpath">
        <pathelement location="${basedir}/lib/commons-lang3-3.1.jar"/>
    </path>

    <path id="library.gson-2.2.4.classpath">
        <pathelement location="${basedir}/lib/gson-2.2.4.jar"/>
    </path>

    <path id="library.guava-14.0.1.classpath">
        <pathelement location="${basedir}/lib/guava-14.0.1.jar"/>
    </path>

    <path id="library.javassist.classpath">
        <pathelement location="${basedir}/lib/javassist.jar"/>
    </path>

    <path id="library.log4j-api-2.0-beta6.classpath">
        <pathelement location="${basedir}/lib/log4j-api-2.0-beta6.jar"/>
    </path>

    <path id="library.log4j-core-2.0-beta6.classpath">
        <pathelement location="${basedir}/lib/log4j-core-2.0-beta6.jar"/>
    </path>

    <path id="library.reflections-0.9.9-rc1-uberjar.classpath">
        <pathelement location="${basedir}/lib/reflections-0.9.9-RC1-uberjar.jar"/>
    </path>

    <path id="library.sqlite-jdbc-3.7.15-snapshot-2.classpath">
        <pathelement location="${basedir}/lib/sqlite-jdbc-3.7.15-SNAPSHOT-2.jar"/>
    </path>


    <!-- Global Libraries -->

    <!-- Modules -->

    <import file="${basedir}/module_jomp16-bot.xml"/>

    <import file="${basedir}/plugin_src/Bash/module_bash.xml"/>

    <import file="${basedir}/plugin_src/CodecUtils/module_codecutils.xml"/>

    <import file="${basedir}/plugin_src/Google/module_google.xml"/>

    <import file="${basedir}/plugin_src/JavaScript/module_javascript.xml"/>

    <import file="${basedir}/plugin_src/Manager/module_manager.xml"/>

    <import file="${basedir}/plugin_src/Notes/module_notes.xml"/>

    <import file="${basedir}/plugin_src/Utils/module_utils.xml"/>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean"
            depends="clean.module.jomp16-bot, clean.module.bash, clean.module.codecutils, clean.module.google, clean.module.javascript, clean.module.manager, clean.module.notes, clean.module.utils"
            description="cleanup all"/>

    <target name="build.modules"
            depends="init, clean, compile.module.jomp16-bot, compile.module.bash, compile.module.codecutils, compile.module.google, compile.module.javascript, compile.module.manager, compile.module.notes, compile.module.utils"
            description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.bash" value="${basedir}/plugins"/>
        <property name="artifact.output.codecutils" value="${basedir}/plugins"/>
        <property name="artifact.output.google" value="${basedir}/plugins"/>
        <property name="artifact.output.javascript" value="${basedir}/plugins"/>
        <property name="artifact.output.jomp16-bot" value="${basedir}"/>
        <property name="artifact.output.manager" value="${basedir}/plugins"/>
        <property name="artifact.output.notes" value="${basedir}/plugins"/>
        <property name="artifact.output.utils" value="${basedir}/plugins"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.Bash.jar" value="${artifacts.temp.dir}/Bash.jar"/>
        <property name="temp.jar.path.CodecUtils.jar" value="${artifacts.temp.dir}/CodecUtils.jar"/>
        <property name="temp.jar.path.Google.jar" value="${artifacts.temp.dir}/Google.jar"/>
        <property name="temp.jar.path.JavaScript.jar" value="${artifacts.temp.dir}/JavaScript.jar"/>
        <property name="temp.jar.path.jomp16-bot.jar" value="${artifacts.temp.dir}/jomp16-bot.jar"/>
        <property name="temp.jar.path.Manager.jar" value="${artifacts.temp.dir}/Manager.jar"/>
        <property name="temp.jar.path.Notes.jar" value="${artifacts.temp.dir}/Notes.jar"/>
        <property name="temp.jar.path.Utils.jar" value="${artifacts.temp.dir}/Utils.jar"/>
    </target>

    <target name="artifact.bash" depends="init.artifacts, compile.module.bash"
            description="Build &#39;Bash&#39; artifact">
        <property name="artifact.temp.output.bash" value="${artifacts.temp.dir}/Bash"/>
        <mkdir dir="${artifact.temp.output.bash}"/>
        <jar destfile="${temp.jar.path.Bash.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${basedir}/plugin_src/Bash/lang" prefix="lang"/>
            <zipfileset dir="${bash.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.Bash.jar}" tofile="${artifact.temp.output.bash}/Bash.jar"/>
    </target>

    <target name="artifact.codecutils" depends="init.artifacts, compile.module.codecutils"
            description="Build &#39;CodecUtils&#39; artifact">
        <property name="artifact.temp.output.codecutils" value="${artifacts.temp.dir}/CodecUtils"/>
        <mkdir dir="${artifact.temp.output.codecutils}"/>
        <jar destfile="${temp.jar.path.CodecUtils.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${codecutils.output.dir}"/>
            <zipfileset src="${basedir}/lib/commons-codec-1.8.jar"/>
        </jar>
        <copy file="${temp.jar.path.CodecUtils.jar}" tofile="${artifact.temp.output.codecutils}/CodecUtils.jar"/>
    </target>

    <target name="artifact.google" depends="init.artifacts, compile.module.google"
            description="Build &#39;Google&#39; artifact">
        <property name="artifact.temp.output.google" value="${artifacts.temp.dir}/Google"/>
        <mkdir dir="${artifact.temp.output.google}"/>
        <jar destfile="${temp.jar.path.Google.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${google.output.dir}"/>
            <zipfileset src="${basedir}/lib/gson-2.2.4.jar"/>
        </jar>
        <copy file="${temp.jar.path.Google.jar}" tofile="${artifact.temp.output.google}/Google.jar"/>
    </target>

    <target name="artifact.javascript" depends="init.artifacts, compile.module.javascript"
            description="Build &#39;JavaScript&#39; artifact">
        <property name="artifact.temp.output.javascript" value="${artifacts.temp.dir}/JavaScript"/>
        <mkdir dir="${artifact.temp.output.javascript}"/>
        <jar destfile="${temp.jar.path.JavaScript.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${javascript.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.JavaScript.jar}" tofile="${artifact.temp.output.javascript}/JavaScript.jar"/>
    </target>

    <target name="artifact.jomp16-bot" depends="init.artifacts, compile.module.jomp16-bot"
            description="Build &#39;jomp16-bot&#39; artifact">
        <property name="artifact.temp.output.jomp16-bot" value="${artifacts.temp.dir}/jomp16_bot"/>
        <mkdir dir="${artifact.temp.output.jomp16-bot}"/>
        <jar destfile="${temp.jar.path.jomp16-bot.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${basedir}/lang" prefix="lang"/>
            <zipfileset dir="${jomp16-bot.output.dir}"/>
            <zipfileset src="${basedir}/lib/log4j-api-2.0-beta6.jar"/>
            <zipfileset src="${basedir}/lib/log4j-core-2.0-beta6.jar"/>
            <zipfileset src="${basedir}/lib/commons-lang3-3.1.jar"/>
            <zipfileset src="${basedir}/lib/reflections-0.9.9-RC1-uberjar.jar"/>
            <zipfileset src="${basedir}/lib/javassist.jar"/>
        </jar>
        <copy file="${temp.jar.path.jomp16-bot.jar}" tofile="${artifact.temp.output.jomp16-bot}/jomp16-bot.jar"/>
    </target>

    <target name="artifact.manager" depends="init.artifacts, compile.module.manager"
            description="Build &#39;Manager&#39; artifact">
        <property name="artifact.temp.output.manager" value="${artifacts.temp.dir}/Manager"/>
        <mkdir dir="${artifact.temp.output.manager}"/>
        <jar destfile="${temp.jar.path.Manager.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${manager.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.Manager.jar}" tofile="${artifact.temp.output.manager}/Manager.jar"/>
    </target>

    <target name="artifact.notes" depends="init.artifacts, compile.module.notes"
            description="Build &#39;Notes&#39; artifact">
        <property name="artifact.temp.output.notes" value="${artifacts.temp.dir}/Notes"/>
        <mkdir dir="${artifact.temp.output.notes}"/>
        <jar destfile="${temp.jar.path.Notes.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${notes.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.Notes.jar}" tofile="${artifact.temp.output.notes}/Notes.jar"/>
    </target>

    <target name="artifact.utils" depends="init.artifacts, compile.module.utils"
            description="Build &#39;Utils&#39; artifact">
        <property name="artifact.temp.output.utils" value="${artifacts.temp.dir}/Utils"/>
        <mkdir dir="${artifact.temp.output.utils}"/>
        <jar destfile="${temp.jar.path.Utils.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${utils.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.Utils.jar}" tofile="${artifact.temp.output.utils}/Utils.jar"/>
    </target>

    <target name="build.all.artifacts"
            depends="artifact.bash, artifact.codecutils, artifact.google, artifact.javascript, artifact.jomp16-bot, artifact.manager, artifact.notes, artifact.utils"
            description="Build all artifacts">
        <mkdir dir="${artifact.output.bash}"/>
        <copy todir="${artifact.output.bash}">
            <fileset dir="${artifact.temp.output.bash}"/>
        </copy>
        <mkdir dir="${artifact.output.codecutils}"/>
        <copy todir="${artifact.output.codecutils}">
            <fileset dir="${artifact.temp.output.codecutils}"/>
        </copy>
        <mkdir dir="${artifact.output.google}"/>
        <copy todir="${artifact.output.google}">
            <fileset dir="${artifact.temp.output.google}"/>
        </copy>
        <mkdir dir="${artifact.output.javascript}"/>
        <copy todir="${artifact.output.javascript}">
            <fileset dir="${artifact.temp.output.javascript}"/>
        </copy>
        <mkdir dir="${artifact.output.jomp16-bot}"/>
        <copy todir="${artifact.output.jomp16-bot}">
            <fileset dir="${artifact.temp.output.jomp16-bot}"/>
        </copy>
        <mkdir dir="${artifact.output.manager}"/>
        <copy todir="${artifact.output.manager}">
            <fileset dir="${artifact.temp.output.manager}"/>
        </copy>
        <mkdir dir="${artifact.output.notes}"/>
        <copy todir="${artifact.output.notes}">
            <fileset dir="${artifact.temp.output.notes}"/>
        </copy>
        <mkdir dir="${artifact.output.utils}"/>
        <copy todir="${artifact.output.utils}">
            <fileset dir="${artifact.temp.output.utils}"/>
        </copy>

        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>